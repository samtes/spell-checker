#!/usr/bin/env ruby

require_relative './lib/check_url'
require_relative './lib/extract_tags'
require_relative './lib/check_spell'
require 'highline/import'
require 'smart_colored/extend'

def instruction 
<<EOS

Tool usage instruction:

  <url> and enter - to run the tool -- Example <http://this-is-the-url> <enter>
  Q or q - to exit the tool 
  Help - to display the menu
 
EOS
end

def auth 
<<EOS 

This page requires AUTHENTICATION'
EOS
end

def wrong_auth 
<<EOS 

Wrong credentials please enter correct AUTHENTICATION'
EOS
end

def output_file
<<EOS

Please enter output filename.
EOS
end

def menu 
  puts instruction
  url = gets.chomp
  controller(url)
end

def controller(url)
  if url == "q" || url == "Q" 
    puts "Bye!"
  elsif url == ""
    puts "Invalid url"
    menu
  else
    check_url(url)
  end 
end

def output(obj, text='')
  if text == ''  
    text = obj.print_text
  else
    text
  end 
  puts output_file.yellow
  filename = gets.chomp
  file_created = Spellcheck.new(text)
  file_created.create_write(filename)
  output = file_created.run_script(filename)
  puts
  puts output.yellow
  puts
end

def extruct_text(obj, num=0)
  if num == 0
    puts auth.underline.red
  else 
    puts wrong_auth.underline.red
  end 
  username = ask("Username: ".yellow)
  password = ask("Password: ".yellow) { |q| q.echo = false}
  code = obj.check_auth(username, password)
  if code != 401 
    text = obj.print_auth_page(username, password)
    output(obj, text)
  else
    extruct_text(obj, 1)
  end 
end

def check_url(url)
  if url.length > 0 
    test_url = Url_check.new(url)
    if test_url.validate == 1
      check_tags = Grab_text.new(url)
      code = check_tags.check_auth()
      puts "this is a test #{code}"
      if code != 401 
        output(check_tags)
      else
        extruct_text(check_tags)
      end 
    else 
      puts "#{url} is not a valid url. Please enter a valid url"
      puts menu
    end 
  end 
end

menu
